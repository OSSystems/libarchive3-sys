// automatically generated by rust-bindgen

pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void) -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type dev_t = __darwin_dev_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
pub type off_t = __darwin_off_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
impl ::std::clone::Clone for Struct_ostat {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_ostat {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_birthtimespec: Struct_timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::clone::Clone for Struct_stat {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_birthtimespec: Struct_timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::clone::Clone for Struct_stat64 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_stat64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct__filesec { }
pub type filesec_t = *mut Struct__filesec;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type rsize_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type max_align_t = ::libc::c_double;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void)
                                                             -> ::libc::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                                            arg2: *mut ::libc::c_char,
                                                            arg3: ::libc::c_int)
                                                            -> ::libc::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                                            arg2: fpos_t,
                                                            arg3: ::libc::c_int)
                                                            -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void,
                                                             arg2: *const ::libc::c_char,
                                                             arg3: ::libc::c_int)
                                                             -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FILE = Struct___sFILE;
pub type ssize_t = __darwin_ssize_t;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type imaxdiv_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_accessx_descriptor {
    pub ad_name_offset: ::libc::c_uint,
    pub ad_flags: ::libc::c_int,
    pub ad_pad: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_accessx_descriptor {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_accessx_descriptor {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fd_set = Struct_fd_set;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type suseconds_t = __darwin_suseconds_t;
pub type sigset_t = __darwin_sigset_t;
pub type uuid_t = __darwin_uuid_t;
pub enum Struct_fssearchblock { }
pub enum Struct_searchstate { }
pub enum Struct_archive { }
pub enum Struct_archive_entry { }
pub type archive_read_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                      _client_data: *mut ::libc::c_void,
                                                      _buffer: *mut *const ::libc::c_void)
                                                      -> ssize_t;
pub type archive_skip_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                      _client_data: *mut ::libc::c_void,
                                                      request: int64_t)
                                                      -> int64_t;
pub type archive_seek_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                      _client_data: *mut ::libc::c_void,
                                                      offset: int64_t,
                                                      whence: ::libc::c_int)
                                                      -> int64_t;
pub type archive_write_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                       _client_data: *mut ::libc::c_void,
                                                       _buffer: *const ::libc::c_void,
                                                       _length: size_t)
                                                       -> ssize_t;
pub type archive_open_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                      _client_data: *mut ::libc::c_void)
                                                      -> ::libc::c_int;
pub type archive_close_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                       _client_data: *mut ::libc::c_void)
                                                       -> ::libc::c_int;
pub type archive_switch_callback = unsafe extern "C" fn(arg1: *mut Struct_archive,
                                                        _client_data1: *mut ::libc::c_void,
                                                        _client_data2: *mut ::libc::c_void)
                                                        -> ::libc::c_int;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type fixpt_t = u_int32_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type key_t = __int32_t;
pub type id_t = __darwin_id_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type clock_t = __darwin_clock_t;
pub type errno_t = ::libc::c_int;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Struct_archive_acl { }
pub enum Struct_archive_entry_linkresolver { }
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[link(name = "archive")]
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut optarg: *mut ::libc::c_char;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
    pub static mut optreset: ::libc::c_int;
    pub static mut tzname: *mut *mut ::libc::c_char;
    pub static mut getdate_err: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut daylight: ::libc::c_int;
}
#[link(name = "archive")]
extern "C" {
    pub fn chmod(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn fchmod(arg1: ::libc::c_int, arg2: mode_t) -> ::libc::c_int;
    pub fn fstat(arg1: ::libc::c_int, arg2: *mut Struct_stat) -> ::libc::c_int;
    pub fn lstat(arg1: *const ::libc::c_char, arg2: *mut Struct_stat) -> ::libc::c_int;
    pub fn mkdir(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn mkfifo(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn stat(arg1: *const ::libc::c_char, arg2: *mut Struct_stat) -> ::libc::c_int;
    pub fn mknod(arg1: *const ::libc::c_char, arg2: mode_t, arg3: dev_t) -> ::libc::c_int;
    pub fn umask(arg1: mode_t) -> mode_t;
    pub fn fchmodat(arg1: ::libc::c_int,
                    arg2: *const ::libc::c_char,
                    arg3: mode_t,
                    arg4: ::libc::c_int)
                    -> ::libc::c_int;
    pub fn fstatat(arg1: ::libc::c_int,
                   arg2: *const ::libc::c_char,
                   arg3: *mut Struct_stat,
                   arg4: ::libc::c_int)
                   -> ::libc::c_int;
    pub fn mkdirat(arg1: ::libc::c_int,
                   arg2: *const ::libc::c_char,
                   arg3: mode_t)
                   -> ::libc::c_int;
    pub fn chflags(arg1: *const ::libc::c_char, arg2: __uint32_t) -> ::libc::c_int;
    pub fn chmodx_np(arg1: *const ::libc::c_char, arg2: filesec_t) -> ::libc::c_int;
    pub fn fchflags(arg1: ::libc::c_int, arg2: __uint32_t) -> ::libc::c_int;
    pub fn fchmodx_np(arg1: ::libc::c_int, arg2: filesec_t) -> ::libc::c_int;
    pub fn fstatx_np(arg1: ::libc::c_int,
                     arg2: *mut Struct_stat,
                     arg3: filesec_t)
                     -> ::libc::c_int;
    pub fn lchflags(arg1: *const ::libc::c_char, arg2: __uint32_t) -> ::libc::c_int;
    pub fn lchmod(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn lstatx_np(arg1: *const ::libc::c_char,
                     arg2: *mut Struct_stat,
                     arg3: filesec_t)
                     -> ::libc::c_int;
    pub fn mkdirx_np(arg1: *const ::libc::c_char, arg2: filesec_t) -> ::libc::c_int;
    pub fn mkfifox_np(arg1: *const ::libc::c_char, arg2: filesec_t) -> ::libc::c_int;
    pub fn statx_np(arg1: *const ::libc::c_char,
                    arg2: *mut Struct_stat,
                    arg3: filesec_t)
                    -> ::libc::c_int;
    pub fn umaskx_np(arg1: filesec_t) -> ::libc::c_int;
    pub fn fstatx64_np(arg1: ::libc::c_int,
                       arg2: *mut Struct_stat64,
                       arg3: filesec_t)
                       -> ::libc::c_int;
    pub fn lstatx64_np(arg1: *const ::libc::c_char,
                       arg2: *mut Struct_stat64,
                       arg3: filesec_t)
                       -> ::libc::c_int;
    pub fn statx64_np(arg1: *const ::libc::c_char,
                      arg2: *mut Struct_stat64,
                      arg3: filesec_t)
                      -> ::libc::c_int;
    pub fn fstat64(arg1: ::libc::c_int, arg2: *mut Struct_stat64) -> ::libc::c_int;
    pub fn lstat64(arg1: *const ::libc::c_char, arg2: *mut Struct_stat64) -> ::libc::c_int;
    pub fn stat64(arg1: *const ::libc::c_char, arg2: *mut Struct_stat64) -> ::libc::c_int;
    pub fn renameat(arg1: ::libc::c_int,
                    arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int,
                    arg4: *const ::libc::c_char)
                    -> ::libc::c_int;
    pub fn clearerr(arg1: *mut FILE) -> ();
    pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
    pub fn fgets(arg1: *mut ::libc::c_char,
                 arg2: ::libc::c_int,
                 arg3: *mut FILE)
                 -> *mut ::libc::c_char;
    pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::libc::c_char,
                   arg2: *const ::libc::c_char,
                   arg3: *mut FILE)
                   -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
    pub fn fwrite(arg1: *const ::libc::c_void,
                  arg2: size_t,
                  arg3: size_t,
                  arg4: *mut FILE)
                  -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn perror(arg1: *const ::libc::c_char) -> ();
    pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rewind(arg1: *mut FILE) -> ();
    pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char) -> ();
    pub fn setvbuf(arg1: *mut FILE,
                   arg2: *mut ::libc::c_char,
                   arg3: ::libc::c_int,
                   arg4: size_t)
                   -> ::libc::c_int;
    pub fn sprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, arg3: va_list) -> ::libc::c_int;
    pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list) -> ::libc::c_int;
    pub fn vsprintf(arg1: *mut ::libc::c_char,
                    arg2: *const ::libc::c_char,
                    arg3: va_list)
                    -> ::libc::c_int;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE,
                      arg2: *const ::libc::c_char,
                      arg3: va_list)
                      -> ::libc::c_int;
    pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
    pub fn flockfile(arg1: *mut FILE) -> ();
    pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(arg1: *mut FILE) -> ();
    pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
    pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn tempnam(arg1: *const ::libc::c_char,
                   arg2: *const ::libc::c_char)
                   -> *mut ::libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::libc::c_char,
                    arg2: size_t,
                    arg3: *const ::libc::c_char,
                    ...)
                    -> ::libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, arg3: va_list) -> ::libc::c_int;
    pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list) -> ::libc::c_int;
    pub fn vsnprintf(arg1: *mut ::libc::c_char,
                     arg2: size_t,
                     arg3: *const ::libc::c_char,
                     arg4: va_list)
                     -> ::libc::c_int;
    pub fn vsscanf(arg1: *const ::libc::c_char,
                   arg2: *const ::libc::c_char,
                   arg3: va_list)
                   -> ::libc::c_int;
    pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vdprintf(arg1: ::libc::c_int,
                    arg2: *const ::libc::c_char,
                    arg3: va_list)
                    -> ::libc::c_int;
    pub fn getdelim(arg1: *mut *mut ::libc::c_char,
                    arg2: *mut size_t,
                    arg3: ::libc::c_int,
                    arg4: *mut FILE)
                    -> ssize_t;
    pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t, arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                    arg2: *const ::libc::c_char,
                    ...)
                    -> ::libc::c_int;
    pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
    pub fn fmtcheck(arg1: *const ::libc::c_char,
                    arg2: *const ::libc::c_char)
                    -> *const ::libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char, arg3: ::libc::c_int) -> ();
    pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
    pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char,
                     arg3: va_list)
                     -> ::libc::c_int;
    pub fn zopen(arg1: *const ::libc::c_char,
                 arg2: *const ::libc::c_char,
                 arg3: ::libc::c_int)
                 -> *mut FILE;
    pub fn funopen(arg1: *const ::libc::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::libc::c_void,
                                                                  arg2:
                                                                      *mut ::libc::c_char,
                                                                  arg3:
                                                                      ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::libc::c_void,
                                                                  arg2:
                                                                      *const ::libc::c_char,
                                                                  arg3:
                                                                      ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::libc::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::libc::c_char,
                         arg2: ::libc::c_int,
                         arg3: size_t,
                         arg4: *const ::libc::c_char,
                         ...)
                         -> ::libc::c_int;
    pub fn __snprintf_chk(arg1: *mut ::libc::c_char,
                          arg2: size_t,
                          arg3: ::libc::c_int,
                          arg4: size_t,
                          arg5: *const ::libc::c_char,
                          ...)
                          -> ::libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::libc::c_char,
                          arg2: ::libc::c_int,
                          arg3: size_t,
                          arg4: *const ::libc::c_char,
                          arg5: va_list)
                          -> ::libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char,
                           arg2: size_t,
                           arg3: ::libc::c_int,
                           arg4: size_t,
                           arg5: *const ::libc::c_char,
                           arg6: va_list)
                           -> ::libc::c_int;
    pub fn imaxabs(j: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int)
                     -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int)
                     -> uintmax_t;
    pub fn wcstoimax(__nptr: *const wchar_t,
                     __endptr: *mut *mut wchar_t,
                     __base: ::libc::c_int)
                     -> intmax_t;
    pub fn wcstoumax(__nptr: *const wchar_t,
                     __endptr: *mut *mut wchar_t,
                     __base: ::libc::c_int)
                     -> uintmax_t;
    pub fn getattrlistbulk(arg1: ::libc::c_int,
                           arg2: *mut ::libc::c_void,
                           arg3: *mut ::libc::c_void,
                           arg4: size_t,
                           arg5: uint64_t)
                           -> ::libc::c_int;
    pub fn faccessat(arg1: ::libc::c_int,
                     arg2: *const ::libc::c_char,
                     arg3: ::libc::c_int,
                     arg4: ::libc::c_int)
                     -> ::libc::c_int;
    pub fn fchownat(arg1: ::libc::c_int,
                    arg2: *const ::libc::c_char,
                    arg3: uid_t,
                    arg4: gid_t,
                    arg5: ::libc::c_int)
                    -> ::libc::c_int;
    pub fn linkat(arg1: ::libc::c_int,
                  arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int,
                  arg4: *const ::libc::c_char,
                  arg5: ::libc::c_int)
                  -> ::libc::c_int;
    pub fn readlinkat(arg1: ::libc::c_int,
                      arg2: *const ::libc::c_char,
                      arg3: *mut ::libc::c_char,
                      arg4: size_t)
                      -> ssize_t;
    pub fn symlinkat(arg1: *const ::libc::c_char,
                     arg2: ::libc::c_int,
                     arg3: *const ::libc::c_char)
                     -> ::libc::c_int;
    pub fn unlinkat(arg1: ::libc::c_int,
                    arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int)
                    -> ::libc::c_int;
    pub fn getattrlistat(arg1: ::libc::c_int,
                         arg2: *const ::libc::c_char,
                         arg3: *mut ::libc::c_void,
                         arg4: *mut ::libc::c_void,
                         arg5: size_t,
                         arg6: ::libc::c_ulong)
                         -> ::libc::c_int;
    pub fn _exit(arg1: ::libc::c_int) -> ();
    pub fn access(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn alarm(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn chdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn chown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t) -> ::libc::c_int;
    pub fn close(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn execl(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execle(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execlp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execv(arg1: *const ::libc::c_char, arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execve(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char,
                  arg3: *const *mut ::libc::c_char)
                  -> ::libc::c_int;
    pub fn execvp(arg1: *const ::libc::c_char, arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fork() -> pid_t;
    pub fn fpathconf(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_long;
    pub fn getcwd(arg1: *mut ::libc::c_char, arg2: size_t) -> *mut ::libc::c_char;
    pub fn getegid() -> gid_t;
    pub fn geteuid() -> uid_t;
    pub fn getgid() -> gid_t;
    pub fn getgroups(arg1: ::libc::c_int, arg2: *mut gid_t) -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_char;
    pub fn getpgrp() -> pid_t;
    pub fn getpid() -> pid_t;
    pub fn getppid() -> pid_t;
    pub fn getuid() -> uid_t;
    pub fn isatty(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn link(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn lseek(arg1: ::libc::c_int, arg2: off_t, arg3: ::libc::c_int) -> off_t;
    pub fn pathconf(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_long;
    pub fn pause() -> ::libc::c_int;
    pub fn pipe(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn read(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t) -> ssize_t;
    pub fn rmdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::libc::c_int;
    pub fn setsid() -> pid_t;
    pub fn setuid(arg1: uid_t) -> ::libc::c_int;
    pub fn sleep(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sysconf(arg1: ::libc::c_int) -> ::libc::c_long;
    pub fn tcgetpgrp(arg1: ::libc::c_int) -> pid_t;
    pub fn tcsetpgrp(arg1: ::libc::c_int, arg2: pid_t) -> ::libc::c_int;
    pub fn ttyname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ttyname_r(arg1: ::libc::c_int,
                     arg2: *mut ::libc::c_char,
                     arg3: size_t)
                     -> ::libc::c_int;
    pub fn unlink(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn write(arg1: ::libc::c_int, arg2: *const ::libc::c_void, arg3: size_t) -> ssize_t;
    pub fn confstr(arg1: ::libc::c_int, arg2: *mut ::libc::c_char, arg3: size_t) -> size_t;
    pub fn getopt(arg1: ::libc::c_int,
                  arg2: *const *mut ::libc::c_char,
                  arg3: *const ::libc::c_char)
                  -> ::libc::c_int;
    pub fn brk(arg1: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn chroot(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn crypt(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn encrypt(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) -> ();
    pub fn fchdir(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn getpgid(arg1: pid_t) -> pid_t;
    pub fn getsid(arg1: pid_t) -> pid_t;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getpass(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getwd(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn lchown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t) -> ::libc::c_int;
    pub fn lockf(arg1: ::libc::c_int, arg2: ::libc::c_int, arg3: off_t) -> ::libc::c_int;
    pub fn nice(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn pread(arg1: ::libc::c_int,
                 arg2: *mut ::libc::c_void,
                 arg3: size_t,
                 arg4: off_t)
                 -> ssize_t;
    pub fn pwrite(arg1: ::libc::c_int,
                  arg2: *const ::libc::c_void,
                  arg3: size_t,
                  arg4: off_t)
                  -> ssize_t;
    pub fn sbrk(arg1: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn setpgrp() -> pid_t;
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::libc::c_int;
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void, arg3: ssize_t) -> ();
    pub fn sync() -> ();
    pub fn truncate(arg1: *const ::libc::c_char, arg2: off_t) -> ::libc::c_int;
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
    pub fn usleep(arg1: useconds_t) -> ::libc::c_int;
    pub fn vfork() -> pid_t;
    pub fn fsync(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ftruncate(arg1: ::libc::c_int, arg2: off_t) -> ::libc::c_int;
    pub fn getlogin_r(arg1: *mut ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn fchown(arg1: ::libc::c_int, arg2: uid_t, arg3: gid_t) -> ::libc::c_int;
    pub fn gethostname(arg1: *mut ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn readlink(arg1: *const ::libc::c_char,
                    arg2: *mut ::libc::c_char,
                    arg3: size_t)
                    -> ssize_t;
    pub fn setegid(arg1: gid_t) -> ::libc::c_int;
    pub fn seteuid(arg1: uid_t) -> ::libc::c_int;
    pub fn symlink(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pselect(arg1: ::libc::c_int,
                   arg2: *mut fd_set,
                   arg3: *mut fd_set,
                   arg4: *mut fd_set,
                   arg5: *const Struct_timespec,
                   arg6: *const sigset_t)
                   -> ::libc::c_int;
    pub fn select(arg1: ::libc::c_int,
                  arg2: *mut fd_set,
                  arg3: *mut fd_set,
                  arg4: *mut fd_set,
                  arg5: *mut Struct_timeval)
                  -> ::libc::c_int;
    pub fn _Exit(arg1: ::libc::c_int) -> ();
    pub fn accessx_np(arg1: *const Struct_accessx_descriptor,
                      arg2: size_t,
                      arg3: *mut ::libc::c_int,
                      arg4: uid_t)
                      -> ::libc::c_int;
    pub fn acct(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn add_profil(arg1: *mut ::libc::c_char,
                      arg2: size_t,
                      arg3: ::libc::c_ulong,
                      arg4: ::libc::c_uint)
                      -> ::libc::c_int;
    pub fn endusershell() -> ();
    pub fn execvP(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char,
                  arg3: *const *mut ::libc::c_char)
                  -> ::libc::c_int;
    pub fn fflagstostr(arg1: ::libc::c_ulong) -> *mut ::libc::c_char;
    pub fn getdomainname(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn getgrouplist(arg1: *const ::libc::c_char,
                        arg2: ::libc::c_int,
                        arg3: *mut ::libc::c_int,
                        arg4: *mut ::libc::c_int)
                        -> ::libc::c_int;
    pub fn gethostuuid(arg1: uuid_t, arg2: *const Struct_timespec) -> ::libc::c_int;
    pub fn getmode(arg1: *const ::libc::c_void, arg2: mode_t) -> mode_t;
    pub fn getpeereid(arg1: ::libc::c_int, arg2: *mut uid_t, arg3: *mut gid_t) -> ::libc::c_int;
    pub fn getsgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_char;
    pub fn getwgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn initgroups(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn iruserok(arg1: ::libc::c_ulong,
                    arg2: ::libc::c_int,
                    arg3: *const ::libc::c_char,
                    arg4: *const ::libc::c_char)
                    -> ::libc::c_int;
    pub fn iruserok_sa(arg1: *const ::libc::c_void,
                       arg2: ::libc::c_int,
                       arg3: ::libc::c_int,
                       arg4: *const ::libc::c_char,
                       arg5: *const ::libc::c_char)
                       -> ::libc::c_int;
    pub fn issetugid() -> ::libc::c_int;
    pub fn mkdtemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkpath_np(path: *const ::libc::c_char, omode: mode_t) -> ::libc::c_int;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn nfssvc(arg1: ::libc::c_int, arg2: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn profil(arg1: *mut ::libc::c_char,
                  arg2: size_t,
                  arg3: ::libc::c_ulong,
                  arg4: ::libc::c_uint)
                  -> ::libc::c_int;
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::libc::c_int;
    pub fn rcmd(arg1: *mut *mut ::libc::c_char,
                arg2: ::libc::c_int,
                arg3: *const ::libc::c_char,
                arg4: *const ::libc::c_char,
                arg5: *const ::libc::c_char,
                arg6: *mut ::libc::c_int)
                -> ::libc::c_int;
    pub fn rcmd_af(arg1: *mut *mut ::libc::c_char,
                   arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char,
                   arg4: *const ::libc::c_char,
                   arg5: *const ::libc::c_char,
                   arg6: *mut ::libc::c_int,
                   arg7: ::libc::c_int)
                   -> ::libc::c_int;
    pub fn reboot(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn revoke(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rresvport(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn rresvport_af(arg1: *mut ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn ruserok(arg1: *const ::libc::c_char,
                   arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char,
                   arg4: *const ::libc::c_char)
                   -> ::libc::c_int;
    pub fn setdomainname(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn setgroups(arg1: ::libc::c_int, arg2: *const gid_t) -> ::libc::c_int;
    pub fn sethostid(arg1: ::libc::c_long) -> ();
    pub fn sethostname(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char) -> ();
    pub fn setlogin(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setmode(arg1: *const ::libc::c_char) -> *mut ::libc::c_void;
    pub fn setrgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setruid(arg1: uid_t) -> ::libc::c_int;
    pub fn setsgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn setusershell() -> ();
    pub fn setwgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn strtofflags(arg1: *mut *mut ::libc::c_char,
                       arg2: *mut ::libc::c_ulong,
                       arg3: *mut ::libc::c_ulong)
                       -> ::libc::c_int;
    pub fn swapon(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn syscall(arg1: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn undelete(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unwhiteout(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char)
                     -> ::libc::c_int;
    pub fn fgetattrlist(arg1: ::libc::c_int,
                        arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void,
                        arg4: size_t,
                        arg5: ::libc::c_uint)
                        -> ::libc::c_int;
    pub fn fsetattrlist(arg1: ::libc::c_int,
                        arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void,
                        arg4: size_t,
                        arg5: ::libc::c_uint)
                        -> ::libc::c_int;
    pub fn getattrlist(arg1: *const ::libc::c_char,
                       arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void,
                       arg4: size_t,
                       arg5: ::libc::c_uint)
                       -> ::libc::c_int;
    pub fn setattrlist(arg1: *const ::libc::c_char,
                       arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void,
                       arg4: size_t,
                       arg5: ::libc::c_uint)
                       -> ::libc::c_int;
    pub fn exchangedata(arg1: *const ::libc::c_char,
                        arg2: *const ::libc::c_char,
                        arg3: ::libc::c_uint)
                        -> ::libc::c_int;
    pub fn getdirentriesattr(arg1: ::libc::c_int,
                             arg2: *mut ::libc::c_void,
                             arg3: *mut ::libc::c_void,
                             arg4: size_t,
                             arg5: *mut ::libc::c_uint,
                             arg6: *mut ::libc::c_uint,
                             arg7: *mut ::libc::c_uint,
                             arg8: ::libc::c_uint)
                             -> ::libc::c_int;
    pub fn searchfs(arg1: *const ::libc::c_char,
                    arg2: *mut Struct_fssearchblock,
                    arg3: *mut ::libc::c_ulong,
                    arg4: ::libc::c_uint,
                    arg5: ::libc::c_uint,
                    arg6: *mut Struct_searchstate)
                    -> ::libc::c_int;
    pub fn fsctl(arg1: *const ::libc::c_char,
                 arg2: ::libc::c_ulong,
                 arg3: *mut ::libc::c_void,
                 arg4: ::libc::c_uint)
                 -> ::libc::c_int;
    pub fn ffsctl(arg1: ::libc::c_int,
                  arg2: ::libc::c_ulong,
                  arg3: *mut ::libc::c_void,
                  arg4: ::libc::c_uint)
                  -> ::libc::c_int;
    pub fn fsync_volume_np(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn sync_volume_np(arg1: *const ::libc::c_char, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn archive_version_number() -> ::libc::c_int;
    pub fn archive_version_string() -> *const ::libc::c_char;
    pub fn archive_read_new() -> *mut Struct_archive;
    pub fn archive_read_support_compression_all(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_bzip2(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_compress(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_gzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_lzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_lzma(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_none(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_program(arg1: *mut Struct_archive,
                                                    command: *const ::libc::c_char)
                                                    -> ::libc::c_int;
    pub fn archive_read_support_compression_program_signature(arg1: *mut Struct_archive,
                                                              arg2: *const ::libc::c_char,
                                                              arg3: *const ::libc::c_void,
                                                              arg4: size_t)
                                                              -> ::libc::c_int;
    pub fn archive_read_support_compression_rpm(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_uu(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_compression_xz(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_all(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_bzip2(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_compress(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_gzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_grzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_lrzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_lzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_lzma(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_lzop(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_none(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_program(arg1: *mut Struct_archive,
                                               command: *const ::libc::c_char)
                                               -> ::libc::c_int;
    pub fn archive_read_support_filter_program_signature(arg1: *mut Struct_archive,
                                                         arg2: *const ::libc::c_char,
                                                         arg3: *const ::libc::c_void,
                                                         arg4: size_t)
                                                         -> ::libc::c_int;
    pub fn archive_read_support_filter_rpm(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_uu(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_filter_xz(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_7zip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_all(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_ar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_by_code(arg1: *mut Struct_archive,
                                               arg2: ::libc::c_int)
                                               -> ::libc::c_int;
    pub fn archive_read_support_format_cab(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_cpio(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_empty(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_gnutar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_iso9660(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_lha(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_mtree(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_rar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_raw(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_tar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_xar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_support_format_zip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_set_format(arg1: *mut Struct_archive,
                                   arg2: ::libc::c_int)
                                   -> ::libc::c_int;
    pub fn archive_read_append_filter(arg1: *mut Struct_archive,
                                      arg2: ::libc::c_int)
                                      -> ::libc::c_int;
    pub fn archive_read_append_filter_program(arg1: *mut Struct_archive,
                                              arg2: *const ::libc::c_char)
                                              -> ::libc::c_int;
    pub fn archive_read_append_filter_program_signature(arg1: *mut Struct_archive,
                                                        arg2: *const ::libc::c_char,
                                                        arg3: *const ::libc::c_void,
                                                        arg4: size_t)
                                                        -> ::libc::c_int;
    pub fn archive_read_set_open_callback(arg1: *mut Struct_archive,
                                          arg2:
                                              *mut ::std::option::Option<extern "C" fn()
                                                                             ->
                                                                                 ::libc::c_int>)
     -> ::libc::c_int;
    pub fn archive_read_set_read_callback(arg1: *mut Struct_archive,
                                          arg2:
                                              *mut ::std::option::Option<extern "C" fn()
                                                                             ->
                                                                                 ssize_t>)
     -> ::libc::c_int;
    pub fn archive_read_set_seek_callback(arg1: *mut Struct_archive,
                                          arg2:
                                              *mut ::std::option::Option<extern "C" fn()
                                                                             ->
                                                                                 int64_t>)
     -> ::libc::c_int;
    pub fn archive_read_set_skip_callback(arg1: *mut Struct_archive,
                                          arg2:
                                              *mut ::std::option::Option<extern "C" fn()
                                                                             ->
                                                                                 int64_t>)
     -> ::libc::c_int;
    pub fn archive_read_set_close_callback(arg1: *mut Struct_archive,
                                           arg2:
                                               *mut ::std::option::Option<extern "C" fn()
                                                                              ->
                                                                                  ::libc::c_int>)
     -> ::libc::c_int;
    pub fn archive_read_set_switch_callback(arg1: *mut Struct_archive,
                                            arg2:
                                                *mut ::std::option::Option<extern "C" fn()
                                                                               ->
                                                                                   ::libc::c_int>)
     -> ::libc::c_int;
    pub fn archive_read_set_callback_data(arg1: *mut Struct_archive,
                                          arg2: *mut ::libc::c_void)
                                          -> ::libc::c_int;
    pub fn archive_read_set_callback_data2(arg1: *mut Struct_archive,
                                           arg2: *mut ::libc::c_void,
                                           arg3: ::libc::c_uint)
                                           -> ::libc::c_int;
    pub fn archive_read_add_callback_data(arg1: *mut Struct_archive,
                                          arg2: *mut ::libc::c_void,
                                          arg3: ::libc::c_uint)
                                          -> ::libc::c_int;
    pub fn archive_read_append_callback_data(arg1: *mut Struct_archive,
                                             arg2: *mut ::libc::c_void)
                                             -> ::libc::c_int;
    pub fn archive_read_prepend_callback_data(arg1: *mut Struct_archive,
                                              arg2: *mut ::libc::c_void)
                                              -> ::libc::c_int;
    pub fn archive_read_open1(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_open(arg1: *mut Struct_archive,
                             _client_data: *mut ::libc::c_void,
                             arg2: ::std::option::Option<archive_open_callback>,
                             arg3: ::std::option::Option<archive_read_callback>,
                             arg4: ::std::option::Option<archive_close_callback>)
                             -> ::libc::c_int;
    pub fn archive_read_open2(arg1: *mut Struct_archive,
                              _client_data: *mut ::libc::c_void,
                              arg2: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
                              arg3: *mut ::std::option::Option<extern "C" fn() -> ssize_t>,
                              arg4: *mut ::std::option::Option<extern "C" fn() -> int64_t>,
                              arg5: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                              -> ::libc::c_int;
    pub fn archive_read_open_filename(arg1: *mut Struct_archive,
                                      _filename: *const ::libc::c_char,
                                      _block_size: size_t)
                                      -> ::libc::c_int;
    pub fn archive_read_open_filenames(arg1: *mut Struct_archive,
                                       _filenames: *mut *const ::libc::c_char,
                                       _block_size: size_t)
                                       -> ::libc::c_int;
    pub fn archive_read_open_filename_w(arg1: *mut Struct_archive,
                                        _filename: *const wchar_t,
                                        _block_size: size_t)
                                        -> ::libc::c_int;
    pub fn archive_read_open_file(arg1: *mut Struct_archive,
                                  _filename: *const ::libc::c_char,
                                  _block_size: size_t)
                                  -> ::libc::c_int;
    pub fn archive_read_open_memory(arg1: *mut Struct_archive,
                                    buff: *mut ::libc::c_void,
                                    size: size_t)
                                    -> ::libc::c_int;
    pub fn archive_read_open_memory2(a: *mut Struct_archive,
                                     buff: *mut ::libc::c_void,
                                     size: size_t,
                                     read_size: size_t)
                                     -> ::libc::c_int;
    pub fn archive_read_open_fd(arg1: *mut Struct_archive,
                                _fd: ::libc::c_int,
                                _block_size: size_t)
                                -> ::libc::c_int;
    pub fn archive_read_open_FILE(arg1: *mut Struct_archive, _file: *mut FILE) -> ::libc::c_int;
    pub fn archive_read_next_header(arg1: *mut Struct_archive,
                                    arg2: *mut *mut Struct_archive_entry)
                                    -> ::libc::c_int;
    pub fn archive_read_next_header2(arg1: *mut Struct_archive,
                                     arg2: *mut Struct_archive_entry)
                                     -> ::libc::c_int;
    pub fn archive_read_header_position(arg1: *mut Struct_archive) -> int64_t;
    pub fn archive_read_data(arg1: *mut Struct_archive,
                             arg2: *mut ::libc::c_void,
                             arg3: size_t)
                             -> ssize_t;
    pub fn archive_seek_data(arg1: *mut Struct_archive,
                             arg2: int64_t,
                             arg3: ::libc::c_int)
                             -> int64_t;
    pub fn archive_read_data_block(a: *mut Struct_archive,
                                   buff: *mut *const ::libc::c_void,
                                   size: *mut size_t,
                                   offset: *mut int64_t)
                                   -> ::libc::c_int;
    pub fn archive_read_data_skip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_data_into_fd(arg1: *mut Struct_archive,
                                     fd: ::libc::c_int)
                                     -> ::libc::c_int;
    pub fn archive_read_set_format_option(_a: *mut Struct_archive,
                                          m: *const ::libc::c_char,
                                          o: *const ::libc::c_char,
                                          v: *const ::libc::c_char)
                                          -> ::libc::c_int;
    pub fn archive_read_set_filter_option(_a: *mut Struct_archive,
                                          m: *const ::libc::c_char,
                                          o: *const ::libc::c_char,
                                          v: *const ::libc::c_char)
                                          -> ::libc::c_int;
    pub fn archive_read_set_option(_a: *mut Struct_archive,
                                   m: *const ::libc::c_char,
                                   o: *const ::libc::c_char,
                                   v: *const ::libc::c_char)
                                   -> ::libc::c_int;
    pub fn archive_read_set_options(_a: *mut Struct_archive,
                                    opts: *const ::libc::c_char)
                                    -> ::libc::c_int;
    pub fn archive_read_extract(arg1: *mut Struct_archive,
                                arg2: *mut Struct_archive_entry,
                                flags: ::libc::c_int)
                                -> ::libc::c_int;
    pub fn archive_read_extract2(arg1: *mut Struct_archive,
                                 arg2: *mut Struct_archive_entry,
                                 arg3: *mut Struct_archive)
                                 -> ::libc::c_int;
    pub fn archive_read_extract_set_progress_callback(arg1:
                                                          *mut Struct_archive,
                                                      _progress_func:
                                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                         *mut ::libc::c_void)
                                                                                    ->
                                                                                        ()>,
                                                      _user_data:
                                                          *mut ::libc::c_void)
     -> ();
    pub fn archive_read_extract_set_skip_file(arg1: *mut Struct_archive,
                                              arg2: int64_t,
                                              arg3: int64_t)
                                              -> ();
    pub fn archive_read_close(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_free(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_finish(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_new() -> *mut Struct_archive;
    pub fn archive_write_set_bytes_per_block(arg1: *mut Struct_archive,
                                             bytes_per_block: ::libc::c_int)
                                             -> ::libc::c_int;
    pub fn archive_write_get_bytes_per_block(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_bytes_in_last_block(arg1: *mut Struct_archive,
                                                 bytes_in_last_block: ::libc::c_int)
                                                 -> ::libc::c_int;
    pub fn archive_write_get_bytes_in_last_block(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_skip_file(arg1: *mut Struct_archive,
                                       arg2: int64_t,
                                       arg3: int64_t)
                                       -> ::libc::c_int;
    pub fn archive_write_set_compression_bzip2(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_compression_compress(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_compression_gzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_compression_lzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_compression_lzma(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_compression_none(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_compression_program(arg1: *mut Struct_archive,
                                                 cmd: *const ::libc::c_char)
                                                 -> ::libc::c_int;
    pub fn archive_write_set_compression_xz(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter(arg1: *mut Struct_archive,
                                    filter_code: ::libc::c_int)
                                    -> ::libc::c_int;
    pub fn archive_write_add_filter_by_name(arg1: *mut Struct_archive,
                                            name: *const ::libc::c_char)
                                            -> ::libc::c_int;
    pub fn archive_write_add_filter_b64encode(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_bzip2(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_compress(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_grzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_gzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_lrzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_lzip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_lzma(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_lzop(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_none(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_program(arg1: *mut Struct_archive,
                                            cmd: *const ::libc::c_char)
                                            -> ::libc::c_int;
    pub fn archive_write_add_filter_uuencode(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_add_filter_xz(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format(arg1: *mut Struct_archive,
                                    format_code: ::libc::c_int)
                                    -> ::libc::c_int;
    pub fn archive_write_set_format_by_name(arg1: *mut Struct_archive,
                                            name: *const ::libc::c_char)
                                            -> ::libc::c_int;
    pub fn archive_write_set_format_7zip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_ar_bsd(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_ar_svr4(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_cpio(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_cpio_newc(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_gnutar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_iso9660(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_mtree(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_mtree_classic(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_pax(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_pax_restricted(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_shar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_shar_dump(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_ustar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_v7tar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_xar(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_zip(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_zip_set_compression_deflate(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_zip_set_compression_store(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_open(arg1: *mut Struct_archive,
                              arg2: *mut ::libc::c_void,
                              arg3: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>,
                              arg4: *mut ::std::option::Option<extern "C" fn() -> ssize_t>,
                              arg5: *mut ::std::option::Option<extern "C" fn() -> ::libc::c_int>)
                              -> ::libc::c_int;
    pub fn archive_write_open_fd(arg1: *mut Struct_archive, _fd: ::libc::c_int) -> ::libc::c_int;
    pub fn archive_write_open_filename(arg1: *mut Struct_archive,
                                       _file: *const ::libc::c_char)
                                       -> ::libc::c_int;
    pub fn archive_write_open_filename_w(arg1: *mut Struct_archive,
                                         _file: *const wchar_t)
                                         -> ::libc::c_int;
    pub fn archive_write_open_file(arg1: *mut Struct_archive,
                                   _file: *const ::libc::c_char)
                                   -> ::libc::c_int;
    pub fn archive_write_open_FILE(arg1: *mut Struct_archive, arg2: *mut FILE) -> ::libc::c_int;
    pub fn archive_write_open_memory(arg1: *mut Struct_archive,
                                     _buffer: *mut ::libc::c_void,
                                     _buffSize: size_t,
                                     _used: *mut size_t)
                                     -> ::libc::c_int;
    pub fn archive_write_header(arg1: *mut Struct_archive,
                                arg2: *mut Struct_archive_entry)
                                -> ::libc::c_int;
    pub fn archive_write_data(arg1: *mut Struct_archive,
                              arg2: *const ::libc::c_void,
                              arg3: size_t)
                              -> ssize_t;
    pub fn archive_write_data_block(arg1: *mut Struct_archive,
                                    arg2: *const ::libc::c_void,
                                    arg3: size_t,
                                    arg4: int64_t)
                                    -> ssize_t;
    pub fn archive_write_finish_entry(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_close(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_fail(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_free(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_finish(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_set_format_option(_a: *mut Struct_archive,
                                           m: *const ::libc::c_char,
                                           o: *const ::libc::c_char,
                                           v: *const ::libc::c_char)
                                           -> ::libc::c_int;
    pub fn archive_write_set_filter_option(_a: *mut Struct_archive,
                                           m: *const ::libc::c_char,
                                           o: *const ::libc::c_char,
                                           v: *const ::libc::c_char)
                                           -> ::libc::c_int;
    pub fn archive_write_set_option(_a: *mut Struct_archive,
                                    m: *const ::libc::c_char,
                                    o: *const ::libc::c_char,
                                    v: *const ::libc::c_char)
                                    -> ::libc::c_int;
    pub fn archive_write_set_options(_a: *mut Struct_archive,
                                     opts: *const ::libc::c_char)
                                     -> ::libc::c_int;
    pub fn archive_write_disk_new() -> *mut Struct_archive;
    pub fn archive_write_disk_set_skip_file(arg1: *mut Struct_archive,
                                            arg2: int64_t,
                                            arg3: int64_t)
                                            -> ::libc::c_int;
    pub fn archive_write_disk_set_options(arg1: *mut Struct_archive,
                                          flags: ::libc::c_int)
                                          -> ::libc::c_int;
    pub fn archive_write_disk_set_standard_lookup(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_write_disk_set_group_lookup(arg1: *mut Struct_archive,
                                               arg2: *mut ::libc::c_void,
                                               arg3:
                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::libc::c_void,
                                                                                              arg2:
                                                                                                  *const ::libc::c_char,
                                                                                              arg3:
                                                                                                  int64_t)
                                                                             ->
                                                                                 int64_t>,
                                               arg4:
                                                   ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                  *mut ::libc::c_void)
                                                                             ->
                                                                                 ()>)
     -> ::libc::c_int;
    pub fn archive_write_disk_set_user_lookup(arg1: *mut Struct_archive,
                                              arg2: *mut ::libc::c_void,
                                              arg3:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::libc::c_void,
                                                                                             arg2:
                                                                                                 *const ::libc::c_char,
                                                                                             arg3:
                                                                                                 int64_t)
                                                                            ->
                                                                                int64_t>,
                                              arg4:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::libc::c_void)
                                                                            ->
                                                                                ()>)
     -> ::libc::c_int;
    pub fn archive_write_disk_gid(arg1: *mut Struct_archive,
                                  arg2: *const ::libc::c_char,
                                  arg3: int64_t)
                                  -> int64_t;
    pub fn archive_write_disk_uid(arg1: *mut Struct_archive,
                                  arg2: *const ::libc::c_char,
                                  arg3: int64_t)
                                  -> int64_t;
    pub fn archive_read_disk_new() -> *mut Struct_archive;
    pub fn archive_read_disk_set_symlink_logical(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_set_symlink_physical(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_set_symlink_hybrid(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_entry_from_file(arg1: *mut Struct_archive,
                                             arg2: *mut Struct_archive_entry,
                                             arg3: ::libc::c_int,
                                             arg4: *const Struct_stat)
                                             -> ::libc::c_int;
    pub fn archive_read_disk_gname(arg1: *mut Struct_archive,
                                   arg2: int64_t)
                                   -> *const ::libc::c_char;
    pub fn archive_read_disk_uname(arg1: *mut Struct_archive,
                                   arg2: int64_t)
                                   -> *const ::libc::c_char;
    pub fn archive_read_disk_set_standard_lookup(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_set_gname_lookup(arg1: *mut Struct_archive,
                                              arg2: *mut ::libc::c_void,
                                              arg3:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::libc::c_void,
                                                                                             arg2:
                                                                                                 int64_t)
                                                                            ->
                                                                                *const ::libc::c_char>,
                                              arg4:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::libc::c_void)
                                                                            ->
                                                                                ()>)
     -> ::libc::c_int;
    pub fn archive_read_disk_set_uname_lookup(arg1: *mut Struct_archive,
                                              arg2: *mut ::libc::c_void,
                                              arg3:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::libc::c_void,
                                                                                             arg2:
                                                                                                 int64_t)
                                                                            ->
                                                                                *const ::libc::c_char>,
                                              arg4:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut ::libc::c_void)
                                                                            ->
                                                                                ()>)
     -> ::libc::c_int;
    pub fn archive_read_disk_open(arg1: *mut Struct_archive,
                                  arg2: *const ::libc::c_char)
                                  -> ::libc::c_int;
    pub fn archive_read_disk_open_w(arg1: *mut Struct_archive,
                                    arg2: *const wchar_t)
                                    -> ::libc::c_int;
    pub fn archive_read_disk_descend(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_can_descend(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_current_filesystem(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_current_filesystem_is_synthetic(arg1: *mut Struct_archive)
                                                             -> ::libc::c_int;
    pub fn archive_read_disk_current_filesystem_is_remote(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_set_atime_restored(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_read_disk_set_behavior(arg1: *mut Struct_archive,
                                          flags: ::libc::c_int)
                                          -> ::libc::c_int;
    pub fn archive_read_disk_set_matching(arg1: *mut Struct_archive,
                                          _matching: *mut Struct_archive,
                                          _excluded_func:
                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                             *mut Struct_archive,
                                                                                         arg2:
                                                                                             *mut ::libc::c_void,
                                                                                         arg3:
                                                                                             *mut Struct_archive_entry)
                                                                        ->
                                                                            ()>,
                                          _client_data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn archive_read_disk_set_metadata_filter_callback(arg1:
                                                              *mut Struct_archive,
                                                          _metadata_filter_func:
                                                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                             *mut Struct_archive,
                                                                                                         arg2:
                                                                                                             *mut ::libc::c_void,
                                                                                                         arg3:
                                                                                                             *mut Struct_archive_entry)
                                                                                        ->
                                                                                            ::libc::c_int>,
                                                          _client_data:
                                                              *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn archive_filter_count(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_filter_bytes(arg1: *mut Struct_archive, arg2: ::libc::c_int) -> int64_t;
    pub fn archive_filter_code(arg1: *mut Struct_archive, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn archive_filter_name(arg1: *mut Struct_archive,
                               arg2: ::libc::c_int)
                               -> *const ::libc::c_char;
    pub fn archive_position_compressed(arg1: *mut Struct_archive) -> int64_t;
    pub fn archive_position_uncompressed(arg1: *mut Struct_archive) -> int64_t;
    pub fn archive_compression_name(arg1: *mut Struct_archive) -> *const ::libc::c_char;
    pub fn archive_compression(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_errno(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_error_string(arg1: *mut Struct_archive) -> *const ::libc::c_char;
    pub fn archive_format_name(arg1: *mut Struct_archive) -> *const ::libc::c_char;
    pub fn archive_format(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_clear_error(arg1: *mut Struct_archive) -> ();
    pub fn archive_set_error(arg1: *mut Struct_archive,
                             _err: ::libc::c_int,
                             fmt: *const ::libc::c_char,
                             ...)
                             -> ();
    pub fn archive_copy_error(dest: *mut Struct_archive, src: *mut Struct_archive) -> ();
    pub fn archive_file_count(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_match_new() -> *mut Struct_archive;
    pub fn archive_match_free(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_match_excluded(arg1: *mut Struct_archive,
                                  arg2: *mut Struct_archive_entry)
                                  -> ::libc::c_int;
    pub fn archive_match_path_excluded(arg1: *mut Struct_archive,
                                       arg2: *mut Struct_archive_entry)
                                       -> ::libc::c_int;
    pub fn archive_match_exclude_pattern(arg1: *mut Struct_archive,
                                         arg2: *const ::libc::c_char)
                                         -> ::libc::c_int;
    pub fn archive_match_exclude_pattern_w(arg1: *mut Struct_archive,
                                           arg2: *const wchar_t)
                                           -> ::libc::c_int;
    pub fn archive_match_exclude_pattern_from_file(arg1: *mut Struct_archive,
                                                   arg2: *const ::libc::c_char,
                                                   _nullSeparator: ::libc::c_int)
                                                   -> ::libc::c_int;
    pub fn archive_match_exclude_pattern_from_file_w(arg1: *mut Struct_archive,
                                                     arg2: *const wchar_t,
                                                     _nullSeparator: ::libc::c_int)
                                                     -> ::libc::c_int;
    pub fn archive_match_include_pattern(arg1: *mut Struct_archive,
                                         arg2: *const ::libc::c_char)
                                         -> ::libc::c_int;
    pub fn archive_match_include_pattern_w(arg1: *mut Struct_archive,
                                           arg2: *const wchar_t)
                                           -> ::libc::c_int;
    pub fn archive_match_include_pattern_from_file(arg1: *mut Struct_archive,
                                                   arg2: *const ::libc::c_char,
                                                   _nullSeparator: ::libc::c_int)
                                                   -> ::libc::c_int;
    pub fn archive_match_include_pattern_from_file_w(arg1: *mut Struct_archive,
                                                     arg2: *const wchar_t,
                                                     _nullSeparator: ::libc::c_int)
                                                     -> ::libc::c_int;
    pub fn archive_match_path_unmatched_inclusions(arg1: *mut Struct_archive) -> ::libc::c_int;
    pub fn archive_match_path_unmatched_inclusions_next(arg1: *mut Struct_archive,
                                                        arg2: *mut *const ::libc::c_char)
                                                        -> ::libc::c_int;
    pub fn archive_match_path_unmatched_inclusions_next_w(arg1: *mut Struct_archive,
                                                          arg2: *mut *const wchar_t)
                                                          -> ::libc::c_int;
    pub fn archive_match_time_excluded(arg1: *mut Struct_archive,
                                       arg2: *mut Struct_archive_entry)
                                       -> ::libc::c_int;
    pub fn archive_match_include_time(arg1: *mut Struct_archive,
                                      _flag: ::libc::c_int,
                                      _sec: time_t,
                                      _nsec: ::libc::c_long)
                                      -> ::libc::c_int;
    pub fn archive_match_include_date(arg1: *mut Struct_archive,
                                      _flag: ::libc::c_int,
                                      _datestr: *const ::libc::c_char)
                                      -> ::libc::c_int;
    pub fn archive_match_include_date_w(arg1: *mut Struct_archive,
                                        _flag: ::libc::c_int,
                                        _datestr: *const wchar_t)
                                        -> ::libc::c_int;
    pub fn archive_match_include_file_time(arg1: *mut Struct_archive,
                                           _flag: ::libc::c_int,
                                           _pathname: *const ::libc::c_char)
                                           -> ::libc::c_int;
    pub fn archive_match_include_file_time_w(arg1: *mut Struct_archive,
                                             _flag: ::libc::c_int,
                                             _pathname: *const wchar_t)
                                             -> ::libc::c_int;
    pub fn archive_match_exclude_entry(arg1: *mut Struct_archive,
                                       _flag: ::libc::c_int,
                                       arg2: *mut Struct_archive_entry)
                                       -> ::libc::c_int;
    pub fn archive_match_owner_excluded(arg1: *mut Struct_archive,
                                        arg2: *mut Struct_archive_entry)
                                        -> ::libc::c_int;
    pub fn archive_match_include_uid(arg1: *mut Struct_archive, arg2: int64_t) -> ::libc::c_int;
    pub fn archive_match_include_gid(arg1: *mut Struct_archive, arg2: int64_t) -> ::libc::c_int;
    pub fn archive_match_include_uname(arg1: *mut Struct_archive,
                                       arg2: *const ::libc::c_char)
                                       -> ::libc::c_int;
    pub fn archive_match_include_uname_w(arg1: *mut Struct_archive,
                                         arg2: *const wchar_t)
                                         -> ::libc::c_int;
    pub fn archive_match_include_gname(arg1: *mut Struct_archive,
                                       arg2: *const ::libc::c_char)
                                       -> ::libc::c_int;
    pub fn archive_match_include_gname_w(arg1: *mut Struct_archive,
                                         arg2: *const wchar_t)
                                         -> ::libc::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::libc::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::libc::c_double;
    pub fn getdate(arg1: *const ::libc::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::libc::c_char,
                    arg2: size_t,
                    arg3: *const ::libc::c_char,
                    arg4: *const Struct_tm)
                    -> size_t;
    pub fn strptime(arg1: *const ::libc::c_char,
                    arg2: *const ::libc::c_char,
                    arg3: *mut Struct_tm)
                    -> *mut ::libc::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset() -> ();
    pub fn asctime_r(arg1: *const Struct_tm, arg2: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm) -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall() -> ();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec) -> ::libc::c_int;
    pub fn archive_entry_clear(arg1: *mut Struct_archive_entry) -> *mut Struct_archive_entry;
    pub fn archive_entry_clone(arg1: *mut Struct_archive_entry) -> *mut Struct_archive_entry;
    pub fn archive_entry_free(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_new() -> *mut Struct_archive_entry;
    pub fn archive_entry_new2(arg1: *mut Struct_archive) -> *mut Struct_archive_entry;
    pub fn archive_entry_atime(arg1: *mut Struct_archive_entry) -> time_t;
    pub fn archive_entry_atime_nsec(arg1: *mut Struct_archive_entry) -> ::libc::c_long;
    pub fn archive_entry_atime_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_birthtime(arg1: *mut Struct_archive_entry) -> time_t;
    pub fn archive_entry_birthtime_nsec(arg1: *mut Struct_archive_entry) -> ::libc::c_long;
    pub fn archive_entry_birthtime_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_ctime(arg1: *mut Struct_archive_entry) -> time_t;
    pub fn archive_entry_ctime_nsec(arg1: *mut Struct_archive_entry) -> ::libc::c_long;
    pub fn archive_entry_ctime_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_dev(arg1: *mut Struct_archive_entry) -> dev_t;
    pub fn archive_entry_dev_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_devmajor(arg1: *mut Struct_archive_entry) -> dev_t;
    pub fn archive_entry_devminor(arg1: *mut Struct_archive_entry) -> dev_t;
    pub fn archive_entry_filetype(arg1: *mut Struct_archive_entry) -> mode_t;
    pub fn archive_entry_fflags(arg1: *mut Struct_archive_entry,
                                arg2: *mut ::libc::c_ulong,
                                arg3: *mut ::libc::c_ulong)
                                -> ();
    pub fn archive_entry_fflags_text(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_gid(arg1: *mut Struct_archive_entry) -> int64_t;
    pub fn archive_entry_gname(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_gname_w(arg1: *mut Struct_archive_entry) -> *const wchar_t;
    pub fn archive_entry_hardlink(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_hardlink_w(arg1: *mut Struct_archive_entry) -> *const wchar_t;
    pub fn archive_entry_ino(arg1: *mut Struct_archive_entry) -> int64_t;
    pub fn archive_entry_ino64(arg1: *mut Struct_archive_entry) -> int64_t;
    pub fn archive_entry_ino_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_mode(arg1: *mut Struct_archive_entry) -> mode_t;
    pub fn archive_entry_mtime(arg1: *mut Struct_archive_entry) -> time_t;
    pub fn archive_entry_mtime_nsec(arg1: *mut Struct_archive_entry) -> ::libc::c_long;
    pub fn archive_entry_mtime_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_nlink(arg1: *mut Struct_archive_entry) -> ::libc::c_uint;
    pub fn archive_entry_pathname(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_pathname_w(arg1: *mut Struct_archive_entry) -> *const wchar_t;
    pub fn archive_entry_perm(arg1: *mut Struct_archive_entry) -> mode_t;
    pub fn archive_entry_rdev(arg1: *mut Struct_archive_entry) -> dev_t;
    pub fn archive_entry_rdevmajor(arg1: *mut Struct_archive_entry) -> dev_t;
    pub fn archive_entry_rdevminor(arg1: *mut Struct_archive_entry) -> dev_t;
    pub fn archive_entry_sourcepath(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_sourcepath_w(arg1: *mut Struct_archive_entry) -> *const wchar_t;
    pub fn archive_entry_size(arg1: *mut Struct_archive_entry) -> int64_t;
    pub fn archive_entry_size_is_set(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_strmode(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_symlink(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_symlink_w(arg1: *mut Struct_archive_entry) -> *const wchar_t;
    pub fn archive_entry_uid(arg1: *mut Struct_archive_entry) -> int64_t;
    pub fn archive_entry_uname(arg1: *mut Struct_archive_entry) -> *const ::libc::c_char;
    pub fn archive_entry_uname_w(arg1: *mut Struct_archive_entry) -> *const wchar_t;
    pub fn archive_entry_set_atime(arg1: *mut Struct_archive_entry,
                                   arg2: time_t,
                                   arg3: ::libc::c_long)
                                   -> ();
    pub fn archive_entry_unset_atime(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_set_birthtime(arg1: *mut Struct_archive_entry,
                                       arg2: time_t,
                                       arg3: ::libc::c_long)
                                       -> ();
    pub fn archive_entry_unset_birthtime(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_set_ctime(arg1: *mut Struct_archive_entry,
                                   arg2: time_t,
                                   arg3: ::libc::c_long)
                                   -> ();
    pub fn archive_entry_unset_ctime(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_set_dev(arg1: *mut Struct_archive_entry, arg2: dev_t) -> ();
    pub fn archive_entry_set_devmajor(arg1: *mut Struct_archive_entry, arg2: dev_t) -> ();
    pub fn archive_entry_set_devminor(arg1: *mut Struct_archive_entry, arg2: dev_t) -> ();
    pub fn archive_entry_set_filetype(arg1: *mut Struct_archive_entry, arg2: ::libc::c_uint) -> ();
    pub fn archive_entry_set_fflags(arg1: *mut Struct_archive_entry,
                                    arg2: ::libc::c_ulong,
                                    arg3: ::libc::c_ulong)
                                    -> ();
    pub fn archive_entry_copy_fflags_text(arg1: *mut Struct_archive_entry,
                                          arg2: *const ::libc::c_char)
                                          -> *const ::libc::c_char;
    pub fn archive_entry_copy_fflags_text_w(arg1: *mut Struct_archive_entry,
                                            arg2: *const wchar_t)
                                            -> *const wchar_t;
    pub fn archive_entry_set_gid(arg1: *mut Struct_archive_entry, arg2: int64_t) -> ();
    pub fn archive_entry_set_gname(arg1: *mut Struct_archive_entry,
                                   arg2: *const ::libc::c_char)
                                   -> ();
    pub fn archive_entry_copy_gname(arg1: *mut Struct_archive_entry,
                                    arg2: *const ::libc::c_char)
                                    -> ();
    pub fn archive_entry_copy_gname_w(arg1: *mut Struct_archive_entry, arg2: *const wchar_t) -> ();
    pub fn archive_entry_update_gname_utf8(arg1: *mut Struct_archive_entry,
                                           arg2: *const ::libc::c_char)
                                           -> ::libc::c_int;
    pub fn archive_entry_set_hardlink(arg1: *mut Struct_archive_entry,
                                      arg2: *const ::libc::c_char)
                                      -> ();
    pub fn archive_entry_copy_hardlink(arg1: *mut Struct_archive_entry,
                                       arg2: *const ::libc::c_char)
                                       -> ();
    pub fn archive_entry_copy_hardlink_w(arg1: *mut Struct_archive_entry,
                                         arg2: *const wchar_t)
                                         -> ();
    pub fn archive_entry_update_hardlink_utf8(arg1: *mut Struct_archive_entry,
                                              arg2: *const ::libc::c_char)
                                              -> ::libc::c_int;
    pub fn archive_entry_set_ino(arg1: *mut Struct_archive_entry, arg2: int64_t) -> ();
    pub fn archive_entry_set_ino64(arg1: *mut Struct_archive_entry, arg2: int64_t) -> ();
    pub fn archive_entry_set_link(arg1: *mut Struct_archive_entry,
                                  arg2: *const ::libc::c_char)
                                  -> ();
    pub fn archive_entry_copy_link(arg1: *mut Struct_archive_entry,
                                   arg2: *const ::libc::c_char)
                                   -> ();
    pub fn archive_entry_copy_link_w(arg1: *mut Struct_archive_entry, arg2: *const wchar_t) -> ();
    pub fn archive_entry_update_link_utf8(arg1: *mut Struct_archive_entry,
                                          arg2: *const ::libc::c_char)
                                          -> ::libc::c_int;
    pub fn archive_entry_set_mode(arg1: *mut Struct_archive_entry, arg2: mode_t) -> ();
    pub fn archive_entry_set_mtime(arg1: *mut Struct_archive_entry,
                                   arg2: time_t,
                                   arg3: ::libc::c_long)
                                   -> ();
    pub fn archive_entry_unset_mtime(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_set_nlink(arg1: *mut Struct_archive_entry, arg2: ::libc::c_uint) -> ();
    pub fn archive_entry_set_pathname(arg1: *mut Struct_archive_entry,
                                      arg2: *const ::libc::c_char)
                                      -> ();
    pub fn archive_entry_copy_pathname(arg1: *mut Struct_archive_entry,
                                       arg2: *const ::libc::c_char)
                                       -> ();
    pub fn archive_entry_copy_pathname_w(arg1: *mut Struct_archive_entry,
                                         arg2: *const wchar_t)
                                         -> ();
    pub fn archive_entry_update_pathname_utf8(arg1: *mut Struct_archive_entry,
                                              arg2: *const ::libc::c_char)
                                              -> ::libc::c_int;
    pub fn archive_entry_set_perm(arg1: *mut Struct_archive_entry, arg2: mode_t) -> ();
    pub fn archive_entry_set_rdev(arg1: *mut Struct_archive_entry, arg2: dev_t) -> ();
    pub fn archive_entry_set_rdevmajor(arg1: *mut Struct_archive_entry, arg2: dev_t) -> ();
    pub fn archive_entry_set_rdevminor(arg1: *mut Struct_archive_entry, arg2: dev_t) -> ();
    pub fn archive_entry_set_size(arg1: *mut Struct_archive_entry, arg2: int64_t) -> ();
    pub fn archive_entry_unset_size(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_copy_sourcepath(arg1: *mut Struct_archive_entry,
                                         arg2: *const ::libc::c_char)
                                         -> ();
    pub fn archive_entry_copy_sourcepath_w(arg1: *mut Struct_archive_entry,
                                           arg2: *const wchar_t)
                                           -> ();
    pub fn archive_entry_set_symlink(arg1: *mut Struct_archive_entry,
                                     arg2: *const ::libc::c_char)
                                     -> ();
    pub fn archive_entry_copy_symlink(arg1: *mut Struct_archive_entry,
                                      arg2: *const ::libc::c_char)
                                      -> ();
    pub fn archive_entry_copy_symlink_w(arg1: *mut Struct_archive_entry,
                                        arg2: *const wchar_t)
                                        -> ();
    pub fn archive_entry_update_symlink_utf8(arg1: *mut Struct_archive_entry,
                                             arg2: *const ::libc::c_char)
                                             -> ::libc::c_int;
    pub fn archive_entry_set_uid(arg1: *mut Struct_archive_entry, arg2: int64_t) -> ();
    pub fn archive_entry_set_uname(arg1: *mut Struct_archive_entry,
                                   arg2: *const ::libc::c_char)
                                   -> ();
    pub fn archive_entry_copy_uname(arg1: *mut Struct_archive_entry,
                                    arg2: *const ::libc::c_char)
                                    -> ();
    pub fn archive_entry_copy_uname_w(arg1: *mut Struct_archive_entry, arg2: *const wchar_t) -> ();
    pub fn archive_entry_update_uname_utf8(arg1: *mut Struct_archive_entry,
                                           arg2: *const ::libc::c_char)
                                           -> ::libc::c_int;
    pub fn archive_entry_stat(arg1: *mut Struct_archive_entry) -> *const Struct_stat;
    pub fn archive_entry_copy_stat(arg1: *mut Struct_archive_entry,
                                   arg2: *const Struct_stat)
                                   -> ();
    pub fn archive_entry_mac_metadata(arg1: *mut Struct_archive_entry,
                                      arg2: *mut size_t)
                                      -> *const ::libc::c_void;
    pub fn archive_entry_copy_mac_metadata(arg1: *mut Struct_archive_entry,
                                           arg2: *const ::libc::c_void,
                                           arg3: size_t)
                                           -> ();
    pub fn archive_entry_acl_clear(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_acl_add_entry(arg1: *mut Struct_archive_entry,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_int,
                                       arg4: ::libc::c_int,
                                       arg5: ::libc::c_int,
                                       arg6: *const ::libc::c_char)
                                       -> ::libc::c_int;
    pub fn archive_entry_acl_add_entry_w(arg1: *mut Struct_archive_entry,
                                         arg2: ::libc::c_int,
                                         arg3: ::libc::c_int,
                                         arg4: ::libc::c_int,
                                         arg5: ::libc::c_int,
                                         arg6: *const wchar_t)
                                         -> ::libc::c_int;
    pub fn archive_entry_acl_reset(arg1: *mut Struct_archive_entry,
                                   arg2: ::libc::c_int)
                                   -> ::libc::c_int;
    pub fn archive_entry_acl_next(arg1: *mut Struct_archive_entry,
                                  arg2: ::libc::c_int,
                                  arg3: *mut ::libc::c_int,
                                  arg4: *mut ::libc::c_int,
                                  arg5: *mut ::libc::c_int,
                                  arg6: *mut ::libc::c_int,
                                  arg7: *mut *const ::libc::c_char)
                                  -> ::libc::c_int;
    pub fn archive_entry_acl_next_w(arg1: *mut Struct_archive_entry,
                                    arg2: ::libc::c_int,
                                    arg3: *mut ::libc::c_int,
                                    arg4: *mut ::libc::c_int,
                                    arg5: *mut ::libc::c_int,
                                    arg6: *mut ::libc::c_int,
                                    arg7: *mut *const wchar_t)
                                    -> ::libc::c_int;
    pub fn archive_entry_acl_text_w(arg1: *mut Struct_archive_entry,
                                    arg2: ::libc::c_int)
                                    -> *const wchar_t;
    pub fn archive_entry_acl_text(arg1: *mut Struct_archive_entry,
                                  arg2: ::libc::c_int)
                                  -> *const ::libc::c_char;
    pub fn archive_entry_acl_count(arg1: *mut Struct_archive_entry,
                                   arg2: ::libc::c_int)
                                   -> ::libc::c_int;
    pub fn archive_entry_acl(arg1: *mut Struct_archive_entry) -> *mut Struct_archive_acl;
    pub fn archive_entry_xattr_clear(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_xattr_add_entry(arg1: *mut Struct_archive_entry,
                                         arg2: *const ::libc::c_char,
                                         arg3: *const ::libc::c_void,
                                         arg4: size_t)
                                         -> ();
    pub fn archive_entry_xattr_count(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_xattr_reset(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_xattr_next(arg1: *mut Struct_archive_entry,
                                    arg2: *mut *const ::libc::c_char,
                                    arg3: *mut *const ::libc::c_void,
                                    arg4: *mut size_t)
                                    -> ::libc::c_int;
    pub fn archive_entry_sparse_clear(arg1: *mut Struct_archive_entry) -> ();
    pub fn archive_entry_sparse_add_entry(arg1: *mut Struct_archive_entry,
                                          arg2: int64_t,
                                          arg3: int64_t)
                                          -> ();
    pub fn archive_entry_sparse_count(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_sparse_reset(arg1: *mut Struct_archive_entry) -> ::libc::c_int;
    pub fn archive_entry_sparse_next(arg1: *mut Struct_archive_entry,
                                     arg2: *mut int64_t,
                                     arg3: *mut int64_t)
                                     -> ::libc::c_int;
    pub fn archive_entry_linkresolver_new() -> *mut Struct_archive_entry_linkresolver;
    pub fn archive_entry_linkresolver_set_strategy(arg1: *mut Struct_archive_entry_linkresolver,
                                                   arg2: ::libc::c_int)
                                                   -> ();
    pub fn archive_entry_linkresolver_free(arg1: *mut Struct_archive_entry_linkresolver) -> ();
    pub fn archive_entry_linkify(arg1: *mut Struct_archive_entry_linkresolver,
                                 arg2: *mut *mut Struct_archive_entry,
                                 arg3: *mut *mut Struct_archive_entry)
                                 -> ();
    pub fn archive_entry_partial_links(res: *mut Struct_archive_entry_linkresolver,
                                       links: *mut ::libc::c_uint)
                                       -> *mut Struct_archive_entry;
}
